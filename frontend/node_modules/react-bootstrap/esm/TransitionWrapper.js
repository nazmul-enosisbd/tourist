import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useCallback, useRef } from 'react';
import Transition from 'react-transition-group/Transition';
import safeFindDOMNode from 'react-overlays/safeFindDOMNode';
import useMergedRefs from '@restart/hooks/useMergedRefs';
import { jsx as _jsx } from "react/jsx-runtime";
// Normalizes Transition callbacks when nodeRef is used.
var TransitionWrapper = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var onEnter = _ref.onEnter,
      onEntering = _ref.onEntering,
      onEntered = _ref.onEntered,
      onExit = _ref.onExit,
      onExiting = _ref.onExiting,
      onExited = _ref.onExited,
      addEndListener = _ref.addEndListener,
      children = _ref.children,
      childRef = _ref.childRef,
      props = _objectWithoutPropertiesLoose(_ref, ["onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "addEndListener", "children", "childRef"]);

  var nodeRef = useRef(null);
  var mergedRef = useMergedRefs(nodeRef, childRef);

  var attachRef = function attachRef(r) {
    mergedRef(safeFindDOMNode(r));
  };

  var normalize = function normalize(callback) {
    return function (param) {
      if (callback && nodeRef.current) {
        callback(nodeRef.current, param);
      }
    };
  };
  /* eslint-disable react-hooks/exhaustive-deps */


  var handleEnter = useCallback(normalize(onEnter), [onEnter]);
  var handleEntering = useCallback(normalize(onEntering), [onEntering]);
  var handleEntered = useCallback(normalize(onEntered), [onEntered]);
  var handleExit = useCallback(normalize(onExit), [onExit]);
  var handleExiting = useCallback(normalize(onExiting), [onExiting]);
  var handleExited = useCallback(normalize(onExited), [onExited]);
  var handleAddEndListener = useCallback(normalize(addEndListener), [addEndListener]);
  /* eslint-enable react-hooks/exhaustive-deps */

  return /*#__PURE__*/_jsx(Transition, _extends({
    ref: ref
  }, props, {
    onEnter: handleEnter,
    onEntered: handleEntered,
    onEntering: handleEntering,
    onExit: handleExit,
    onExited: handleExited,
    onExiting: handleExiting,
    addEndListener: handleAddEndListener,
    nodeRef: nodeRef,
    children: typeof children === 'function' ? function (status, innerProps) {
      return children(status, _extends({}, innerProps, {
        ref: attachRef
      }));
    } : /*#__PURE__*/React.cloneElement(children, {
      ref: attachRef
    })
  }));
});
export default TransitionWrapper;