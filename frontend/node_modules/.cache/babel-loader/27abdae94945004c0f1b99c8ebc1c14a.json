{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar defaultProps = {\n  type: 'radio',\n  vertical: false\n};\nvar ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    value: 'onChange'\n  }),\n      children = _useUncontrolled.children,\n      type = _useUncontrolled.type,\n      name = _useUncontrolled.name,\n      value = _useUncontrolled.value,\n      onChange = _useUncontrolled.onChange,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"children\", \"type\", \"name\", \"value\", \"onChange\"]);\n\n  var getValues = function getValues() {\n    return value == null ? [] : [].concat(value);\n  };\n\n  var handleToggle = function handleToggle(inputVal, event) {\n    if (!onChange) {\n      return;\n    }\n\n    var values = getValues();\n    var isActive = values.indexOf(inputVal) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive && onChange) onChange(inputVal, event);\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== inputVal;\n      }), event);\n    } else {\n      onChange([].concat(values, [inputVal]), event);\n    }\n  };\n\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, _extends({}, controlledProps, {\n    ref: ref,\n    children: map(children, function (child) {\n      var values = getValues();\n      var _child$props = child.props,\n          childVal = _child$props.value,\n          childOnChange = _child$props.onChange;\n\n      var handler = function handler(e) {\n        return handleToggle(childVal, e);\n      };\n\n      return /*#__PURE__*/React.cloneElement(child, {\n        type: type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  }));\n});\nToggleButtonGroup.defaultProps = defaultProps;\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});","map":{"version":3,"sources":["C:/Users/nazmulhasan/Desktop/Learning/React/tourist-app/node_modules/react-bootstrap/esm/ToggleButtonGroup.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","invariant","useUncontrolled","chainFunction","map","ButtonGroup","ToggleButton","jsx","_jsx","defaultProps","type","vertical","ToggleButtonGroup","forwardRef","props","ref","_useUncontrolled","value","children","name","onChange","controlledProps","getValues","concat","handleToggle","inputVal","event","values","isActive","indexOf","filter","n","process","env","NODE_ENV","child","_child$props","childVal","childOnChange","handler","e","cloneElement","checked","Object","assign","Button"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar defaultProps = {\n  type: 'radio',\n  vertical: false\n};\nvar ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    value: 'onChange'\n  }),\n      children = _useUncontrolled.children,\n      type = _useUncontrolled.type,\n      name = _useUncontrolled.name,\n      value = _useUncontrolled.value,\n      onChange = _useUncontrolled.onChange,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"children\", \"type\", \"name\", \"value\", \"onChange\"]);\n\n  var getValues = function getValues() {\n    return value == null ? [] : [].concat(value);\n  };\n\n  var handleToggle = function handleToggle(inputVal, event) {\n    if (!onChange) {\n      return;\n    }\n\n    var values = getValues();\n    var isActive = values.indexOf(inputVal) !== -1;\n\n    if (type === 'radio') {\n      if (!isActive && onChange) onChange(inputVal, event);\n      return;\n    }\n\n    if (isActive) {\n      onChange(values.filter(function (n) {\n        return n !== inputVal;\n      }), event);\n    } else {\n      onChange([].concat(values, [inputVal]), event);\n    }\n  };\n\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, _extends({}, controlledProps, {\n    ref: ref,\n    children: map(children, function (child) {\n      var values = getValues();\n      var _child$props = child.props,\n          childVal = _child$props.value,\n          childOnChange = _child$props.onChange;\n\n      var handler = function handler(e) {\n        return handleToggle(childVal, e);\n      };\n\n      return /*#__PURE__*/React.cloneElement(child, {\n        type: type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  }));\n});\nToggleButtonGroup.defaultProps = defaultProps;\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});"]},"metadata":{},"sourceType":"module"}