{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu, { alignPropType } from './DropdownMenu';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu responsively.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"} }\n   */\n  menuAlign: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nvar DropdownButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var title = _ref.title,\n      children = _ref.children,\n      bsPrefix = _ref.bsPrefix,\n      rootCloseEvent = _ref.rootCloseEvent,\n      variant = _ref.variant,\n      size = _ref.size,\n      menuAlign = _ref.menuAlign,\n      menuRole = _ref.menuRole,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      disabled = _ref.disabled,\n      href = _ref.href,\n      id = _ref.id,\n      menuVariant = _ref.menuVariant,\n      props = _objectWithoutPropertiesLoose(_ref, [\"title\", \"children\", \"bsPrefix\", \"rootCloseEvent\", \"variant\", \"size\", \"menuAlign\", \"menuRole\", \"renderMenuOnMount\", \"disabled\", \"href\", \"id\", \"menuVariant\"]);\n\n  return /*#__PURE__*/_jsxs(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    children: [/*#__PURE__*/_jsx(DropdownToggle, {\n      id: id,\n      href: href,\n      size: size,\n      variant: variant,\n      disabled: disabled,\n      childBsPrefix: bsPrefix,\n      children: title\n    }), /*#__PURE__*/_jsx(DropdownMenu, {\n      align: menuAlign,\n      role: menuRole,\n      renderOnMount: renderMenuOnMount,\n      rootCloseEvent: rootCloseEvent,\n      variant: menuVariant,\n      children: children\n    })]\n  }));\n});\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","map":{"version":3,"sources":["C:/Users/nazmulhasan/Desktop/Learning/React/tourist-app-redux/node_modules/react-bootstrap/esm/DropdownButton.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","Dropdown","DropdownToggle","DropdownMenu","alignPropType","jsx","_jsx","jsxs","_jsxs","propTypes","id","any","href","string","onClick","func","title","node","isRequired","disabled","bool","menuAlign","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","oneOf","bsPrefix","variant","size","DropdownButton","forwardRef","_ref","ref","children","props","childBsPrefix","align","role","renderOnMount","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu, { alignPropType } from './DropdownMenu';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu responsively.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"} }\n   */\n  menuAlign: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nvar DropdownButton = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var title = _ref.title,\n      children = _ref.children,\n      bsPrefix = _ref.bsPrefix,\n      rootCloseEvent = _ref.rootCloseEvent,\n      variant = _ref.variant,\n      size = _ref.size,\n      menuAlign = _ref.menuAlign,\n      menuRole = _ref.menuRole,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      disabled = _ref.disabled,\n      href = _ref.href,\n      id = _ref.id,\n      menuVariant = _ref.menuVariant,\n      props = _objectWithoutPropertiesLoose(_ref, [\"title\", \"children\", \"bsPrefix\", \"rootCloseEvent\", \"variant\", \"size\", \"menuAlign\", \"menuRole\", \"renderMenuOnMount\", \"disabled\", \"href\", \"id\", \"menuVariant\"]);\n\n  return /*#__PURE__*/_jsxs(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    children: [/*#__PURE__*/_jsx(DropdownToggle, {\n      id: id,\n      href: href,\n      size: size,\n      variant: variant,\n      disabled: disabled,\n      childBsPrefix: bsPrefix,\n      children: title\n    }), /*#__PURE__*/_jsx(DropdownMenu, {\n      align: menuAlign,\n      role: menuRole,\n      renderOnMount: renderMenuOnMount,\n      rootCloseEvent: rootCloseEvent,\n      variant: menuVariant,\n      children: children\n    })]\n  }));\n});\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;"]},"metadata":{},"sourceType":"module"}